(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{601:function(t,a,v){t.exports=v.p+"assets/img/06-1.17d05abf.png"},649:function(t,a,v){"use strict";v.r(a);var s=v(15),_=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"从输入url到页面加载的全过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从输入url到页面加载的全过程"}},[t._v("#")]),t._v(" 从输入URL到页面加载的全过程")]),t._v(" "),s("p",[t._v("URL解析、DNS 查询、TCP 连接、HTTP 请求、响应请求、页面渲染")]),t._v(" "),s("img",{attrs:{src:v(601)}}),t._v(" "),s("ul",[s("li",[t._v("在浏览器中输入URL")]),t._v(" "),s("li",[t._v("查找缓存：浏览器先查看浏览器缓存-系统缓存-路由缓存中是否有该地址页面，如果有则显示页面内容。如果没有则进行下一步。\n"),s("ul",[s("li",[t._v("浏览器缓存：浏览器会记录DNS一段时间，因此，只是第一个地方解析DNS请求；")]),t._v(" "),s("li",[t._v("操作系统缓存:如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统， 获取操作系统的记录(保存最近的DNS查询缓存)；")]),t._v(" "),s("li",[t._v("路由器缓存：如果上述两个步骤均不能成功获取DNS记录，继续搜索路由器缓存；")]),t._v(" "),s("li",[t._v("ISP缓存：若上述均失败，继续向ISP搜索。")])])]),t._v(" "),s("li",[t._v("DNS域名解析：浏览器向DNS服务器发起请求，解析该URL中的域名对应的IP地址。DNS服务器是基于UDP的，因此会用到UDP协议")]),t._v(" "),s("li",[t._v("建立TCP连接：解析出IP地址后，根据IP地址和默认80端口，和服务器建立TCP连接")]),t._v(" "),s("li",[t._v("发起HTTP请求：浏览器发起读取文件的HTTP请求，该请求报文作为TCP三次握手的第三次数据发送给服务器")]),t._v(" "),s("li",[t._v("服务器响应请求并返回结果：服务器对浏览器请求做出响应，并把对应的html文件发送给浏览器")]),t._v(" "),s("li",[t._v("关闭TCP连接：通过四次挥手释放TCP连接")]),t._v(" "),s("li",[t._v("浏览器渲染：客户端（浏览器）解析HTML内容并渲染出来，浏览器接收到数据包后的解析流程为：\n"),s("ul",[s("li",[t._v("构建DOM树：词法分析然后解析成DOM树（dom tree），是由dom元素及属性节点组成，树的根是document对象")]),t._v(" "),s("li",[t._v("构建CSS规则树：生成CSS规则树（CSS Rule Tree）")]),t._v(" "),s("li",[t._v("构建render树：Web浏览器将DOM和CSSOM结合，并构建出渲染树（render tree）")]),t._v(" "),s("li",[t._v("布局（Layout）：计算出每个节点在屏幕中的位置")]),t._v(" "),s("li",[t._v("绘制（Painting）：即遍历render树，并使用UI后端层绘制每个节点。")])])]),t._v(" "),s("li",[t._v("JS引擎解析过程：调用JS引擎执行JS代码（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）\n"),s("ul",[s("li",[t._v("创建window对象：window对象也叫全局执行环境，当页面产生时就被创建，所有的全局变量和函数都属于window的属性和方法，而DOM Tree也会映射在window的doucment对象上。当关闭网页或者关闭浏览器时，全局执行环境会被销毁。")]),t._v(" "),s("li",[t._v("加载文件：完成js引擎分析它的语法与词法是否合法，如果合法进入预编译")]),t._v(" "),s("li",[t._v("预编译：在预编译的过程中，浏览器会寻找全局变量声明，把它作为window的属性加入到window对象中，并给变量赋值为'undefined'；寻找全局函数声明，把它作为window的方法加入到window对象中，并将函数体赋值给他（匿名函数是不参与预编译的，因为它是变量）。而变量提升作为不合理的地方在ES6中已经解决了，函数提升还存在。")]),t._v(" "),s("li",[t._v("解释执行：执行到变量就赋值，如果变量没有被定义，也就没有被预编译直接赋值，在ES5非严格模式下这个变量会成为window的一个属性，也就是成为全局变量。string、int这样的值就是直接把值放在变量的存储空间里，object对象就是把指针指向变量的存储空间。函数执行，就将函数的环境推入一个环境的栈中，执行完成后再弹出，控制权交还给之前的环境。JS作用域其实就是这样的执行流机制实现的。")])])])]),t._v(" "),s("h2",{attrs:{id:"重绘与重排"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重绘与重排"}},[t._v("#")]),t._v(" 重绘与重排")]),t._v(" "),s("h3",{attrs:{id:"区别-『重绘』不一定会出现『重排』-『重排』必然会出现『重绘』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别-『重绘』不一定会出现『重排』-『重排』必然会出现『重绘』"}},[t._v("#")]),t._v(" 区别（『重绘』不一定会出现『重排』，『重排』必然会出现『重绘』）")]),t._v(" "),s("ul",[s("li",[t._v("重排/回流（Reflow）：当DOM的变化影响了元素的几何信息，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。表现为重新生成布局，重新排列元素。")]),t._v(" "),s("li",[t._v("重绘(Repaint): 当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘。表现为某些元素的外观被改变")])]),t._v(" "),s("h3",{attrs:{id:"避免重绘或者重排"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#避免重绘或者重排"}},[t._v("#")]),t._v(" 避免重绘或者重排")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("集中改变样式，不要一条一条地修改 DOM 的样式。")])]),t._v(" "),s("li",[s("p",[t._v("不要把 DOM 结点的属性值放在循环里当成循环里的变量。")])]),t._v(" "),s("li",[s("p",[t._v("为动画的 HTML 元件使用 fixed 或 absoult 的 position，那么修改他们的 CSS 是不会 reflow 的。")])]),t._v(" "),s("li",[s("p",[t._v("不使用 table 布局。因为可能很小的一个小改动会造成整个 table 的重新布局。")])]),t._v(" "),s("li",[s("p",[t._v("尽量只修改position：absolute或fixed元素，对其他元素影响不大")])]),t._v(" "),s("li",[s("p",[t._v("动画开始GPU加速，translate使用3D变化")])]),t._v(" "),s("li",[s("p",[t._v("提升为合成层，将元素提升为合成层有以下优点：")]),t._v(" "),s("ul",[s("li",[t._v("合成层的位图，会交由 GPU 合成，比 CPU 处理要快")]),t._v(" "),s("li",[t._v("当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层")]),t._v(" "),s("li",[t._v("对于 transform 和 opacity 效果，不会触发 layout 和 paint")]),t._v(" "),s("li",[t._v("提升合成层的最好方式是使用 CSS 的 will-change 属性：")])]),t._v(" "),s("div",{staticClass:"language-css line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("#target")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("will-change")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" transform"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])])])])}),[],!1,null,null,null);a.default=_.exports}}]);